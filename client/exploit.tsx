import React from "react";
import { RouteChildrenProps, Route } from "react-router";
import { Link } from "react-router-dom";
import { Header, Menu, Container } from "semantic-ui-react";

import { prisma } from "../generated/prisma-client";
import { Loader, useAwait } from "./common";

export const ExploitPath = "/exploit/";

const ExploitList: React.FC<RouteChildrenProps> = props => {
  const match = props.match!;

  const status = useAwait(async () => await prisma.exploits());

  return (
    <Loader
      status={status}
      render={exploitList => (
        <>
          <Header as="h1">Exploit List</Header>
          {exploitList.length > 0 ? (
            <Menu size="large" fluid vertical>
              {exploitList.map(exploit => (
                <Menu.Item
                  key={exploit.id}
                  as={Link}
                  to={`${match.url}${exploit.id}`}
                >
                  {exploit.name}
                </Menu.Item>
              ))}
            </Menu>
          ) : (
            <p>There is no exploit yet</p>
          )}
        </>
      )}
    />
  );
};

type ExploitDetailProps = RouteChildrenProps<{ id: string }>;

const ExploitDetail: React.FC<ExploitDetailProps> = props => {
  const match = props.match!;

  const fetchExploit = async () => {
    const result = await prisma.exploit({
      id: match.params.id
    });
    if (result === null) {
      throw `Exploit "${match.params.id}" not found`;
    }
    return result;
  };

  const status = useAwait(fetchExploit, [match.params.id]);

  return (
    <Loader
      status={status}
      render={exploit => {
        return (
          <>
            <Header as="h1">{exploit.name}</Header>
          </>
        );
      }}
    />
  );
};

export const Exploit: React.FC<RouteChildrenProps> = props => {
  const match = props.match!;
  return (
    <Container text>
      <Route path={match.path} exact component={ExploitList} />
      <Route path={`${match.path}:id`} component={ExploitDetail} />
    </Container>
  );
};
