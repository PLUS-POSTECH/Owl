use chrono::{DateTime, Utc};
use model::FileEntry;

#[derive(Serialize, Deserialize)]
pub struct ExploitData {
    pub name: String,
    pub description: String,
    pub enabled: bool,
    pub max_retries: i32,
    pub timeout: i32,
    pub skip_auth: bool,
    pub last_modified_time: DateTime<Utc>,
    pub exploit_target: Vec<String>,
}

// Filter conditions are combined using OR within field and combined using AND across fields
#[derive(Serialize, Deserialize)]
pub struct ExploitListParams {
    pub show_all: bool,
    pub filter_service: Vec<String>,
    pub filter_service_variant: Vec<String>,
}

#[derive(Serialize, Deserialize)]
pub enum ExploitEditParams {
    Add(ExploitAddParams),
    Delete(ExploitDeleteParams),
    Update(ExploitUpdateParams),
}

#[derive(Serialize, Deserialize)]
pub struct ExploitAddParams {
    pub description: String,
    pub enabled: bool,
    pub max_retries: i32,
    pub timeout: i32,
    pub skip_auth: bool,
    pub exploit_target: Vec<String>,
    pub files: Vec<FileEntry>,
}

#[derive(Serialize, Deserialize)]
pub struct ExploitDeleteParams {
    name: String,
}

#[derive(Serialize, Deserialize)]
pub struct ExploitUpdateParams {
    pub name: String,
    pub description: Option<String>,
    pub enabled: Option<bool>,
    pub max_retries: Option<i32>,
    pub timeout: Option<i32>,
    pub skip_auth: Option<bool>,
    pub exploit_target: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize)]
pub struct ExploitRunParams {
    pub exploit_name: Option<String>,
    pub service_provider_name: Option<String>,
    pub wait: bool,
}

#[derive(Serialize, Deserialize)]
pub enum ExploitStatus {
    Pending,
    Running,
    Authing,
    Ok,
    RunFailed,
    AuthFailed,
}

#[derive(Serialize, Deserialize)]
pub struct ExploitTaskData {
    pub exploit_name: String,
    pub service_provider_name: String,
    pub service_variant_name: String,
    pub retries: i32,
    pub status: ExploitStatus,
    pub published_time: DateTime<Utc>,
    pub last_updated_time: DateTime<Utc>,
}

// Filter conditions are combined using OR within field and combined using AND across fields
#[derive(Serialize, Deserialize)]
pub struct ExploitStatusParams {
    pub show_all: bool,
    pub filter_name: Vec<String>,
    pub filter_service_provider: Vec<String>,
    pub filter_service_variant: Vec<String>,
}
