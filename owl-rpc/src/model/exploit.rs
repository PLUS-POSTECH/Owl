use chrono::{DateTime, Utc};
use model::FileEntry;

#[derive(Serialize, Deserialize)]
pub struct ExploitData {
    pub name: String,
    pub description: String,
    pub target_service: String,
    pub enabled: bool,
    pub max_retries: i32,
    pub timeout: i32,
    pub skip_auth: bool,
    pub last_modified_time: DateTime<Utc>,
}

// Filter conditions are combined using OR within field and combined using AND across fields
#[derive(Serialize, Deserialize)]
pub struct ExploitListParams {
    pub show_all: bool,
    pub filter_targets: Vec<String>,
}

#[derive(Serialize, Deserialize)]
pub struct ExploitAddParams {
    pub description: String,
    pub target_service: String,
    pub max_retries: Option<i32>,
    pub timeout: Option<i32>,
    pub skip_auth: bool,
    pub file_entries: Vec<FileEntry>,
}

#[derive(Serialize, Deserialize)]
pub enum ExploitEditParams {
    Delete {
        name: String,
    },
    Update {
        name: String,
        description: Option<String>,
        target_service: Option<String>,
        enabled: Option<bool>,
        max_retries: Option<Option<i32>>,
        timeout: Option<Option<i32>>,
        skip_auth: Option<bool>,
    },
}

#[derive(Serialize, Deserialize)]
pub struct ExploitRunParams {
    pub name: String,
    pub wait: bool,
}

#[derive(Serialize, Deserialize)]
pub struct ExploitTaskData {
    pub exploit_name: String,
    pub service_provider_name: String,
    pub service_variant_name: String,
    pub retries: i32,
    pub status_enum: String,
    pub status_message: String,
    pub published_time: DateTime<Utc>,
    pub last_updated_time: DateTime<Utc>,
}

// Filter conditions are combined using OR within field and combined using AND across fields
#[derive(Serialize, Deserialize)]
pub struct ExploitStatusParams {
    pub show_all: bool,
    pub filter_targets: Vec<String>,
    pub filter_skip_auth: Option<bool>,
    pub filter_exploit: Option<String>,
}

#[derive(Serialize, Deserialize)]
pub struct ExploitDownloadParams {
    pub name: String,
}

#[derive(Serialize, Deserialize)]
pub struct ExploitAttachmentData {
    pub file_entries: Vec<FileEntry>,
}
