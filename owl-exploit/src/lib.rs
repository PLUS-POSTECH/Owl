extern crate futures;
extern crate tokio;
extern crate tokio_process;

use std::io::Error;
use std::process::{Command, Output};

use futures::prelude::*;
use tokio::runtime::TaskExecutor;
use tokio_process::CommandExt;

#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
        assert_eq!(2 + 2, 4);
    }
}

pub struct ExploitRunner {
    executor: TaskExecutor,
}

impl ExploitRunner {
    fn run<F>(&self, exploit_path: String, connection_string: String, callback: &'static F)
        where F: Fn(Result<Output, Error>) -> Result<(), ()> + Send + Sync + 'static {
        self.executor.spawn(Command::new(&exploit_path)
            .env("OWL_CONNECTION_STRING", &connection_string)
            .arg(&connection_string)
            .output_async()
            .then(callback));
    }
}
