#[macro_use]
extern crate log;

extern crate env_logger;
extern crate owl_daemon;
extern crate tokio;

use std::fs;
use std::io::Error;
use std::process::Output;

use futures::prelude::*;
use futures::sync::mpsc;
use futures::{future, Future};
use owl_daemon::exploit::ExploitRunner;
use tokio::runtime::Runtime;

fn run_exploit(command: String, connection_string: String) -> Result<Output, Error> {
    let _ = env_logger::try_init();
    let rt = Runtime::new().unwrap();
    let (tx, mut rx) = mpsc::channel::<Result<Output, Error>>(0);
    let tx_clone = tx.clone();

    let exploit_runner = ExploitRunner::new(".test_exploit", "echo ok".to_string());

    // TODO: writing a good test is hard...

    let result = future::poll_fn(|| rx.poll()).wait().unwrap().unwrap();
    rx.close();
    fs::remove_dir_all(".test_exploit")?;
    rt.shutdown_on_idle().wait().unwrap();
    result
}
